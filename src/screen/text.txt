import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Alert, Switch } from 'react-native';
import { useUser } from '../context/userContext';
import firebase from '@react-native-firebase/database';
import firestore from '@react-native-firebase/firestore';
import PushNotification from 'react-native-push-notification';

const HomeScreen = ({ navigation }) => {
    const { user } = useUser();
    const [notification, setNotification] = useState(null);
    const [notifyName, setNotifyName] = useState(''); //change
    const [notifyLocation, setNotifyLocation] = useState(''); //change
    const [dataUser, setDataUser] = useState(''); // change
    const [systemStatus, setSystemStatus] = useState(false); // change

    const fetchHomeKeyForUser = async (uid) => {
        try {
            const reference = firebase().ref('Device');
            const snapshot = await reference.once('value');
            const devices = snapshot.val();
            for (const key in devices) {
                if (devices[key].user && devices[key].user.uid === uid) {
                    return key;
                }
            }
            return null;
        } catch (error) {
            console.error("Error fetching home key for user:", error);
            return null;
        }
    };

    const handleToggle = async (value) => {
        try {
            const homeKey = await fetchHomeKeyForUser(user.uid);
            if (!homeKey) {
                Alert.alert('Error', 'No home key found for this user.');
                return;
            }
            const reference = firebase().ref(`Device/${homeKey}`);
            await reference.update({ system_status: value ? 1 : 0 });
            setSystemStatus(value);
            Alert.alert('System Status', `System status updated to ${value ? 'ON' : 'OFF'}`);
        } catch (error) {
            console.error("Error updating system status:", error);
        }
    };

    const fetchUserDetails = async (userId) => {
        try {
            const userDocument = await firestore().collection('users').doc(userId).get();
            if (userDocument.exists) {
                const userData = userDocument.data();
                if (userData && userData.name) {
                    setDataUser(userData.name);
                } else {
                    console.log("Name not found in user data.");
                }
            } else {
                console.log("No user found with ID:", userId);
            }
        } catch (error) {
            console.error("Failed to fetch user details:", error);
            return null;
        }
    };

    useEffect(() => {
        if (user) {
            fetchUserDetails(user.uid).then(userDetails => {
                if (userDetails && userDetails.location) {
                    console.log("Location set in state:", userDetails.location);
                    setUpDeviceListener(userDetails.location);
                }
            });
        }

        const onNotificationReceived = notification => {
            console.log("Notification received:", notification);
            setNotification(notification);
        };

        const pushNotificationConfig = {
            onNotification: onNotificationReceived
        };

        PushNotification.configure(pushNotificationConfig);

        return () => {
            const reference = firebase().ref('Device');
            reference.off('value');
        };
    }, [user]);

    const setUpDeviceListener = (location) => {
        const reference = firebase().ref('Device');
        reference.on('value', snapshot => {
            const fetchData = snapshot.val();
            Object.keys(fetchData).forEach(homeKey => {
                const motionValue = fetchData[homeKey].motion?.value;
                const soundValue = fetchData[homeKey].sound?.value;
                if (motionValue === 1) {
                    sendNotification(homeKey, 'motion', location);
                }
                if (soundValue === 1) {
                    sendNotification(homeKey, 'sound', location);
                }
            });
        });
    };

    const sendNotification = async (homeKey, detectionType, location) => {
        try {
            const deviceRef = firebase().ref(`Device/${homeKey}`);
            const deviceSnapshot = await deviceRef.once('value');
            const deviceData = deviceSnapshot.val();
            const deviceName = deviceData && deviceData.user.name ? deviceData.user.name : 'Unknown';
            const deviceLocation = deviceData && deviceData.location ? deviceData.location : location;
            setNotifyName(deviceName);
            setNotifyLocation(deviceLocation);

            const message = detectionType === 'motion'
                ? `Motion detected at ${homeKey}. \nName: ${deviceName}. \nLocation: ${deviceLocation}`
                : `Sound detected at ${homeKey}. \nName: ${deviceName}. \nLocation: ${deviceLocation}`;

            PushNotification.localNotification({
                channelId: "theftguard1234",
                title: "Alert",
                message: message,
                playSound: true,
                soundName: 'default',
            });
        } catch (error) {
            console.error("Failed to send notification:", error);
        }
    };

    const handleNotificationAction = (homeKey, action) => {
        const notificationsRef = firebase().ref('Notifications');
        notificationsRef.push({
            homeKey,
            action,
            user: dataUser ? dataUser : 'Anonymous',
            timestamp: new Date().toISOString(),
        });
        setNotification(null);
    };

    return (
        <View style={styles.container}>
            <Text style={styles.textColor}>
                Welcome! {dataUser}
            </Text>
            <View style={styles.toggleContainer}>
                <Text style={styles.toggleLabel}>System Status</Text>
                <Switch
                    style={styles.togglebutton}
                    value={systemStatus}
                    onValueChange={handleToggle}
                />
            </View>
            {notification && (
                <View style={styles.notificationContainer}>
                    <Text style={styles.notificationTitle}>Notification Received:</Text>
                    <Text style={styles.notificationMessage}>{notification.title || 'No title'}</Text>
                    <Text style={styles.notificationMessage}>{notification.message || 'No message'}</Text>
                    <View style={styles.btnContainer}>
                        <TouchableOpacity style={styles.btnCancel} onPress={() => handleNotificationAction(notification.homeKey, 'dismissed')}>
                            <Text style={styles.btnColor}>Dismiss</Text>
                        </TouchableOpacity>
                        <TouchableOpacity style={styles.btnOk} onPress={() => handleNotificationAction(notification.homeKey, 'accepted')}>
                            <Text style={styles.btnColor}>Accept</Text>
                        </TouchableOpacity>
                    </View>
                </View>
            )}
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    textColor: {
        color: '#000',
        fontWeight: 'bold',
        fontSize: 20,
        marginTop: 20,
        textAlign: 'center',
    },
    toggleContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 20,
    },
    toggleLabel: {
        fontSize: 24,
        marginRight: 10,
        color: '#000',
        fontWeight: 'bold'
    },
    togglebutton:{
        width: 80
    },
    notificationContainer: {
        width: 300,
        height: 'auto',
        marginTop: '30%',
        padding: 10,
        backgroundColor: '#e0e0e0',
        borderRadius: 10,
        color: '#000',
        alignSelf: 'center',
    },
    notificationTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#000',
    },
    notificationMessage: {
        fontSize: 14,
        color: '#000',
    },
    btnContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 10,
    },
    btnCancel: {
        width: 90,
        height: 50,
        backgroundColor: 'red',
        color: "#fff",
        marginLeft: 15,
        padding: 10,
        borderRadius: 2,
        textAlign: 'center',
        borderRadius: 5,
    },
    btnOk: {
        width: 80,
        height: 50,
        textAlign: 'center',
        backgroundColor: 'green',
        marginLeft: 15,
        color: '#fff',
        padding: 10,
        borderRadius: 5,
    },
    btnColor: {
        color: '#FFF',
    },
});

export default HomeScreen;
